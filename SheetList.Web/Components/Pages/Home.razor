@page "/"
@using SheetList.Web.Models
@using SheetList.Web.Models.DTOs
@inject HttpClient Http
@inject NavigationManager NavigationManager
@if(IsUploading)
{
    <LoadingPage/>
}
@if (showAlert)
{
    <div class="alert alert-success" role="alert">
        File uploaded successfully—check it out!
    </div>
}
<PageTitle>Home</PageTitle>
<div class="container">
    <div class="row justify-content-center">
           <Navbar/>
            <div class="card shadow">
                <div class="card-body">
                    <EditForm Model="fileData" OnValidSubmit="UploadFiles">

                        <div class="form-group">
                            <label>Name</label>
                            <InputText class="form-control" id="title" @bind-Value="fileData.FileName" required />
                        </div>
                        <div class="form-group">
                            <label for="excelFile">Excel File</label>
                            <InputFile OnChange="@((e) => fileData.BlobPath = e.File)" accept=".xlsx, .xls" />
                        </div>
                        <div class="form-group text-center">
                            <button type="submit" class="btn btn-primary mr-2" disabled="@IsUploading">Upload</button>
                            <button type="button" class="btn btn-secondary mr-2" @onclick="CancelUpload">Cancel</button>
                        </div>
                    </EditForm>
                </div>
            </div>
    </div>
</div>

@code {
    public bool showAlert { get; set; } = false;
    public FileData fileData = new FileData();
    public UploadFileData uploadFileData = new UploadFileData();
    bool isLoading = true;
    public bool IsUploading { get; set; } = false;
    private ElementReference inputFileElement;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.Delay(1000);
        isLoading = false;
    }

    private async Task UploadFiles()
    {
        if (fileData.BlobPath is null)
        {
            throw new ArgumentNullException("Data cannot be null!!!");
        }
        IsUploading = true;

        try
        {
            var fileDataURI = await UploadFile(fileData.BlobPath, "api/Employee/UploadFile");
            uploadFileData.BlobPath = fileDataURI;

            var fileDetails = new UploadFileData
                {
                    FileName = fileData.FileName,
                    BlobPath = uploadFileData.BlobPath
                };
            await UploadFile(fileDetails);

            showAlert = true;

            NavigationManager.NavigateTo("/files");
        }
        catch (Exception exception)
        {
            Console.WriteLine($"Error fetching: {exception.Message}");
        }
        finally
        {
            IsUploading = false;
        }
    }

    private async Task<string> UploadFile(IBrowserFile file, string apiUrl)
    {
        var content = new MultipartFormDataContent();
        var fileStream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024);
        content.Add(new StreamContent(fileStream), "file", file.Name);

        var response = await Http.PostAsync(apiUrl, content);

        if (!response.IsSuccessStatusCode)
        {
            throw new Exception("File upload failed");
        }
        var result = await response.Content.ReadFromJsonAsync<FileUploadResult>();

        return result?.BlobUri ?? throw new Exception("Upload returned invalid result");
    }


    private async Task UploadFile(UploadFileData uploadFileData)
    {
        var response = await Http.PostAsJsonAsync("/api/FileData/PostFileData", uploadFileData);
        if (!response.IsSuccessStatusCode)
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            throw new Exception($"File upload failed: {errorMessage}");
        }
    }
    private void CancelUpload()
    {
        fileData.FileName = string.Empty;
        fileData.BlobPath = null;
    }
    public class FileUploadResult
    {
        public string BlobUri { get; set; }
    }
}
